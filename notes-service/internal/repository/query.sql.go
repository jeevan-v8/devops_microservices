// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
)

const createNewNote = `-- name: CreateNewNote :one
INSERT INTO notes (title, content, owner)
VALUES ($1, $2, $3)
RETURNING id, title, content, owner, created_at, updated_at
`

type CreateNewNoteParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Owner   int64  `json:"owner"`
}

func (q *Queries) CreateNewNote(ctx context.Context, arg CreateNewNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNewNote, arg.Title, arg.Content, arg.Owner)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :one
DELETE FROM notes
WHERE id = $1
RETURNING id, title, content, owner, created_at, updated_at
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRow(ctx, deleteNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAllNotes = `-- name: FindAllNotes :many
SELECT id, title, content, owner, created_at, updated_at FROM notes
`

func (q *Queries) FindAllNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, findAllNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFromToken = `-- name: GetUserFromToken :one
SELECT hash, user_id, expiry, scope, created_at, updated_at FROM tokens
WHERE hash = $1
`

func (q *Queries) GetUserFromToken(ctx context.Context, hash []byte) (Token, error) {
	row := q.db.QueryRow(ctx, getUserFromToken, hash)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserNotes = `-- name: GetUserNotes :many
SELECT id, title, content, owner, created_at, updated_at FROM notes
WHERE owner = $1
`

func (q *Queries) GetUserNotes(ctx context.Context, owner int64) ([]Note, error) {
	rows, err := q.db.Query(ctx, getUserNotes, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET title = $1, content = $2, updated_at = NOW()
WHERE id = $3
RETURNING id, title, content, owner, created_at, updated_at
`

type UpdateNoteParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, updateNote, arg.Title, arg.Content, arg.ID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
